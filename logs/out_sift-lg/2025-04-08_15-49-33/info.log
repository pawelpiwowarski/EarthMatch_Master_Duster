2025-04-08 15:49:33   main.py --matcher master --max_num_keypoints 2048 --img_size 512 --data_dir data --log_dir out_sift-lg --save_images --device cuda
2025-04-08 15:49:33   Arguments: Namespace(matcher='master', max_num_keypoints=2048, num_iterations=4, img_size=512, save_images=True, device='cuda', data_dir='data', log_dir='out_sift-lg')
2025-04-08 15:49:33   The outputs are being saved in logs/out_sift-lg/2025-04-08_15-49-33
2025-04-08 15:49:58   
Traceback (most recent call last):
  File "/gpfs/home3/scur2410/EarthMatch_Master_Duster/main.py", line 51, in <module>
    matcher = get_matcher(args.matcher, device=args.device, max_num_keypoints=args.max_num_keypoints)
  File "/gpfs/home3/scur2410/EarthMatch_Master_Duster/image-matching-models/matching/utils.py", line 158, in wrapper
    return func(*a, **ka)
  File "/gpfs/home3/scur2410/EarthMatch_Master_Duster/image-matching-models/matching/__init__.py", line 223, in get_matcher
    return master.Mast3rMatcher(device, max_num_keypoints, *args, **kwargs)
  File "/gpfs/home3/scur2410/EarthMatch_Master_Duster/image-matching-models/matching/im_models/master.py", line 29, in __init__
    self.model = AsymmetricMASt3R.from_pretrained(self.model_path).to(device)
  File "/gpfs/home3/scur2410/EarthMatch_Master_Duster/mast3r/model.py", line 50, in from_pretrained
    return load_model(pretrained_model_name_or_path, device='cpu')
  File "/gpfs/home3/scur2410/EarthMatch_Master_Duster/mast3r/model.py", line 24, in load_model
    ckpt = torch.load(model_path, map_location='cpu')
  File "/home/scur2410/miniconda3/envs/earth/lib/python3.10/site-packages/torch/serialization.py", line 1470, in load
    raise pickle.UnpicklingError(_get_wo_message(str(e))) from None
_pickle.UnpicklingError: Weights only load failed. This file can still be loaded, to do so you have two options, [1mdo those steps only if you trust the source of the checkpoint[0m. 
	(1) In PyTorch 2.6, we changed the default value of the `weights_only` argument in `torch.load` from `False` to `True`. Re-running `torch.load` with `weights_only` set to `False` will likely succeed, but it can result in arbitrary code execution. Do it only if you got the file from a trusted source.
	(2) Alternatively, to load with `weights_only=True` please check the recommended steps in the following error message.
	WeightsUnpickler error: Unsupported global: GLOBAL argparse.Namespace was not an allowed global by default. Please use `torch.serialization.add_safe_globals([Namespace])` or the `torch.serialization.safe_globals([Namespace])` context manager to allowlist this global if you trust this class/function.

Check the documentation of torch.load to learn more about types accepted by default with weights_only https://pytorch.org/docs/stable/generated/torch.load.html.

